// sets.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏ —Å–ª–æ–≤

const REPO_PATH = 'Akira-27-CZ/czech-learning';

let availableSets = [];

async function loadSetsFromRepo() {
    const container = document.getElementById('setsContainer');
    container.innerHTML = '<div class="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤...</div>';

    try {
        const indexUrl = `https://raw.githubusercontent.com/${REPO_PATH}/main/word-sets/index.json`;
        const response = await fetch(indexUrl);
        
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å index.json');
        }
        
        const data = await response.json();
        availableSets = data.sets || [];

        if (availableSets.length === 0) {
            container.innerHTML = '<div class="error-box">–ù–∞–±–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        displaySets();
        
    } catch (e) {
        container.innerHTML = `<div class="error-box">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}</div>`;
    }
}

function displaySets() {
    const container = document.getElementById('setsContainer');
    const loadedSets = loadLoadedSets();
    container.innerHTML = '<h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã</h3>';

    availableSets.forEach(set => {
        const isLoaded = loadedSets.includes(set.file);
        
        const setCard = document.createElement('div');
        setCard.className = `set-card ${isLoaded ? 'set-card-loaded' : ''}`;
        setCard.innerHTML = `
            <div class="set-card-header">
                <div class="set-card-title">${set.name}</div>
                <div class="set-card-badge">${set.level || 'beginner'}</div>
            </div>
            <div class="set-card-info">
                üìö ${set.words || '?'} —Å–ª–æ–≤
                ${isLoaded ? '<br>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : ''}
            </div>
            <div class="set-card-actions">
                ${!isLoaded ? 
                    `<button class="button small" onclick="loadSet('${set.file}', '${set.name}')">–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä</button>` :
                    `<button class="button small secondary" onclick="reloadSet('${set.file}', '${set.name}')">–û–±–Ω–æ–≤–∏—Ç—å</button>
                     <button class="button small" onclick="viewSetWordsFromSets('${set.name}')">–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤</button>
                     <button class="button small danger" onclick="deleteSet('${set.file}', '${set.name}')">–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä</button>`
                }
            </div>
        `;
        container.appendChild(setCard);
    });
}

async function loadSet(filename, setName) {
    try {
        const url = `https://raw.githubusercontent.com/${REPO_PATH}/main/word-sets/${filename}`;
        const response = await fetch(url);
        
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä');
        
        const newWords = await response.json();

        if (!Array.isArray(newWords)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }

        const words = loadWords();
        let addedCount = 0;
        
        newWords.forEach(word => {
            if (!words.find(w => w.cs === word.cs && w.ru === word.ru)) {
                words.push({
                    cs: word.cs,
                    tr: word.tr || '',
                    ru: word.ru,
                    correct: 0,
                    incorrect: 0,
                    lastReview: null,
                    setName: setName
                });
                addedCount++;
            }
        });

        saveWords(words);
        
        const loadedSets = loadLoadedSets();
        if (!loadedSets.includes(filename)) {
            loadedSets.push(filename);
            saveLoadedSets(loadedSets);
        }

        displaySets();
        updateMainStats();
        alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: ${addedCount}`);
    } catch (e) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞: ' + e.message);
    }
}

async function reloadSet(filename, setName) {
    if (!confirm(`–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–±–æ—Ä "${setName}"?\n\n–°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.`)) {
        return;
    }

    try {
        const url = `https://raw.githubusercontent.com/${REPO_PATH}/main/word-sets/${filename}`;
        const response = await fetch(url);
        
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä');
        
        const newWords = await response.json();

        if (!Array.isArray(newWords)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }

        let words = loadWords();
        words = words.filter(w => w.setName !== setName);

        newWords.forEach(word => {
            words.push({
                cs: word.cs,
                tr: word.tr || '',
                ru: word.ru,
                correct: 0,
                incorrect: 0,
                lastReview: null,
                setName: setName
            });
        });

        saveWords(words);
        displaySets();
        updateMainStats();
        alert(`–ù–∞–±–æ—Ä "${setName}" –æ–±–Ω–æ–≤–ª–µ–Ω!\n–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${newWords.length}`);
    } catch (e) {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞: ' + e.message);
    }
}

function deleteSet(filename, setName) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä "${setName}"?\n\n–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) {
        return;
    }

    let words = loadWords();
    words = words.filter(w => w.setName !== setName);
    
    let loadedSets = loadLoadedSets();
    loadedSets = loadedSets.filter(f => f !== filename);

    saveWords(words);
    saveLoadedSets(loadedSets);

    displaySets();
    updateMainStats();
    alert(`–ù–∞–±–æ—Ä "${setName}" —É–¥–∞–ª–µ–Ω`);
}

function viewSetWordsFromSets(setName) {
    showSetPreview(setName, 'setsScreen');
}

function showSetPreview(setName, returnScreen = 'setSelectorScreen') {
    window.currentPreviewSet = setName;
    window.previewReturnScreen = returnScreen;
    
    const words = loadWords();
    const setWords = words.filter(w => w.setName === setName);
    
    document.getElementById('previewSetTitle').textContent = setName;
    document.getElementById('previewSetInfo').innerHTML = `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: ${setWords.length}`;
    
    const wordsList = document.getElementById('previewWordsList');
    wordsList.innerHTML = '';
    
    setWords.forEach(word => {
        const card = document.createElement('div');
        card.className = 'word-card';
        card.innerHTML = `
            <div class="word-card-cs">${word.cs}</div>
            <div class="word-card-transcription">${word.tr || ''}</div>
            <div class="word-card-ru">${word.ru}</div>
            <div class="word-card-stats">
                ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${word.correct} | ‚úó –û—à–∏–±–æ–∫: ${word.incorrect}
            </div>
        `;
        wordsList.appendChild(card);
    });
    
    showScreen('setPreviewScreen');
}

function closeSetPreview() {
    showScreen(window.previewReturnScreen || 'setSelectorScreen');
}
