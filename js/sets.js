// sets.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏ —Å–ª–æ–≤

const REPO_PATH = 'Akira-27-CZ/czech-learning';

// availableSets —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ app.js, –Ω–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
// let availableSets = [];  <-- —É–¥–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

// –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ app.js
async function loadSetsFromRepo() {
    displaySets();
}

function displaySets() {
    const container = document.getElementById('setsContainer');
    const loadedSets = loadLoadedSets();
    
    if (!availableSets || availableSets.length === 0) {
        container.innerHTML = '<div class="error-box">–ù–∞–±–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</div>';
        return;
    }
    
    container.innerHTML = '<h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã</h3>';

    availableSets.forEach(set => {
        const isLoaded = loadedSets.includes(set.file);
        
        const setCard = document.createElement('div');
        setCard.className = `set-card ${isLoaded ? 'set-card-loaded' : ''}`;
        setCard.innerHTML = `
            <div class="set-card-header">
                <div class="set-card-title">${set.name}</div>
                <div class="set-card-badge">${set.level || 'beginner'}</div>
            </div>
            <div class="set-card-info">
                üìö ${set.words || '?'} —Å–ª–æ–≤
                ${isLoaded ? '<br>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : ''}
            </div>
            <div class="set-card-actions">
                ${!isLoaded ? 
                    `<button class="button small" onclick="loadSet('${set.file}', '${set.name}')">–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä</button>` :
                    `<button class="button small secondary" onclick="reloadSet('${set.file}', '${set.name}')">–û–±–Ω–æ–≤–∏—Ç—å</button>
                     <button class="button small" onclick="viewSetWordsFromSets('${set.name}')">–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤</button>
                     <button class="button small danger" onclick="deleteSet('${set.file}', '${set.name}')">–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä</button>`
                }
            </div>
        `;
        container.appendChild(setCard);
    });
}


async function loadSet(filename, setName) {
    try {
        const url = `https://raw.githubusercontent.com/${REPO_PATH}/main/word-sets/${filename}`;
        const response = await fetch(url);
        
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä');
        
        const newWords = await response.json();

        if (!Array.isArray(newWords)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }

        const words = loadWords();
        let addedCount = 0;
        
        newWords.forEach(word => {
            if (!words.find(w => w.cs === word.cs && w.ru === word.ru)) {
                words.push({
                    cs: word.cs,
                    tr: word.tr || '',
                    ru: word.ru,
                    correct: 0,
                    incorrect: 0,
                    lastReview: null,
                    setName: setName
                });
                addedCount++;
            }
        });

        saveWords(words);
        
        const loadedSets = loadLoadedSets();
        if (!loadedSets.includes(filename)) {
            loadedSets.push(filename);
            saveLoadedSets(loadedSets);
        }

        displaySets();
        updateMainStats();
        alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: ${addedCount}`);
    } catch (e) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞: ' + e.message);
    }
}

async function reloadSet(filename, setName) {
    if (!confirm(`–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–±–æ—Ä "${setName}"?\n\n–ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —É–¥–∞–ª–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ.\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`)) {
        return;
    }

    try {
        const url = `https://raw.githubusercontent.com/${REPO_PATH}/main/word-sets/${filename}`;
        const response = await fetch(url);
        
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä');
        
        const newWords = await response.json();

        if (!Array.isArray(newWords)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }

        let words = loadWords();
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        const oldSetWords = words.filter(w => w.setName === setName);
        
        // –°–ª–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏
        const otherWords = words.filter(w => w.setName !== setName);
        
        let addedCount = 0;
        let updatedCount = 0;
        let removedCount = 0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        const updatedSetWords = newWords.map(newWord => {
            // –ò—â–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞–±–æ—Ä–∞
            const existingWord = oldSetWords.find(w => 
                w.cs === newWord.cs && w.ru === newWord.ru
            );
            
            if (existingWord) {
                // –°–ª–æ–≤–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                updatedCount++;
                return {
                    ...existingWord,
                    tr: newWord.tr || existingWord.tr || '' // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                };
            } else {
                // –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ - –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω—É–ª–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                addedCount++;
                return {
                    cs: newWord.cs,
                    tr: newWord.tr || '',
                    ru: newWord.ru,
                    correct: 0,
                    incorrect: 0,
                    lastReview: null,
                    setName: setName
                };
            }
        });
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        removedCount = oldSetWords.length - updatedCount;

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–ª–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ + –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        words = [...otherWords, ...updatedSetWords];

        saveWords(words);
        displaySets();
        updateMainStats();
        
        // –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        let message = `–ù–∞–±–æ—Ä "${setName}" –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n`;
        if (addedCount > 0) message += `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${addedCount}\n`;
        if (updatedCount > 0) message += `‚ôªÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${updatedCount} —Å–ª–æ–≤\n`;
        if (removedCount > 0) message += `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤: ${removedCount}\n`;
        
        alert(message);
    } catch (e) {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞: ' + e.message);
    }
}
function deleteSet(filename, setName) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä "${setName}"?\n\n–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞.\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) {
        return;
    }

    let words = loadWords();
    words = words.filter(w => w.setName !== setName);
    
    let loadedSets = loadLoadedSets();
    loadedSets = loadedSets.filter(f => f !== filename);

    saveWords(words);
    saveLoadedSets(loadedSets);

    displaySets();
    updateMainStats();
    alert(`–ù–∞–±–æ—Ä "${setName}" —É–¥–∞–ª–µ–Ω`);
}

function viewSetWordsFromSets(setName) {
    showSetPreview(setName, 'setsScreen');
}

function showSetPreview(setName, returnScreen = 'setSelectorScreen') {
    window.currentPreviewSet = setName;
    window.previewReturnScreen = returnScreen;
    
    const words = loadWords();
    const setWords = words.filter(w => w.setName === setName);
    
    document.getElementById('previewSetTitle').textContent = setName;
    document.getElementById('previewSetInfo').innerHTML = `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: ${setWords.length}`;
    
    const wordsList = document.getElementById('previewWordsList');
    wordsList.innerHTML = '';
    
    setWords.forEach(word => {
        const card = document.createElement('div');
        card.className = 'word-card';
        card.innerHTML = `
            <div class="word-card-cs">${word.cs}</div>
            <div class="word-card-transcription">${word.tr || ''}</div>
            <div class="word-card-ru">${word.ru}</div>
            <div class="word-card-stats">
                ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${word.correct} | ‚úó –û—à–∏–±–æ–∫: ${word.incorrect}
            </div>
        `;
        wordsList.appendChild(card);
    });
    
    showScreen('setPreviewScreen');
}

function closeSetPreview() {
    showScreen(window.previewReturnScreen || 'setSelectorScreen');
}
